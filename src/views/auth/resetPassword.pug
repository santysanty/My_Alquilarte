extends ../layouts/layoutLogin.pug
block content
  div.container.mx-auto.p-4.flex.justify-center.items-center.min-h-screen
    div.w-full.max-w-md.bg-white.shadow-md.rounded-lg.p-6.text-center
      h2.text-2xl.font-bold.mb-6.text-gray-800 Restablecer Contraseña

      // Área para mostrar mensajes de éxito o error al usuario
      #message-area.mb-4(style='display:none;')
        div#success-message.bg-green-100.border.border-green-400.text-green-700.px-4.py-3.rounded.relative(role='alert' style='display:none;')
          span#success-text
        div#error-message.bg-red-100.border.border-red-400.text-red-700.px-4.py-3.rounded.relative(role='alert' style='display:none;')
          span#error-text

      form#resetPasswordForm.space-y-4
        // El campo de email puede ser útil para fines de depuración o UX,
        // aunque el token en la URL es lo principal para identificar al usuario.
        // Se puede hacer oculto si no se desea que el usuario lo vea.
        div
          label.block.text-gray-700.text-sm.font-bold.mb-2(for='email') Email (Opcional, si lo necesitas):
          input#email.shadow.appearance-none.border.rounded.w-full.py-2.px-3.text-gray-700.leading-tight.focus:outline-none.focus:shadow-outline(type='email', name='email', placeholder='Tu email', value=email || '', disabled)
          // El 'value=email || ''' precarga el email si se pasa desde la ruta
          // 'disabled' para que el usuario no lo modifique, ya que el token es la clave.

        div
          label.block.text-gray-700.text-sm.font-bold.mb-2(for='newPassword') Nueva Contraseña:
          input#newPassword.shadow.appearance-none.border.rounded.w-full.py-2.px-3.text-gray-700.leading-tight.focus:outline-none.focus:shadow-outline(type='password', name='newPassword', placeholder='Mínimo 6 caracteres', required, minlength='6')

        div
          label.block.text-gray-700.text-sm.font-bold.mb-2(for='confirmPassword') Confirmar Nueva Contraseña:
          input#confirmPassword.shadow.appearance-none.border.rounded.w-full.py-2.px-3.text-gray-700.leading-tight.focus:outline-none.focus:shadow-outline(type='password', name='confirmPassword', placeholder='Confirma tu nueva contraseña', required)

        div
          button#submitBtn.bg-blue-500.hover:bg-blue-700.text-white.font-bold.py-2.px-4.rounded.focus:outline-none.focus:shadow-outline(type='submit') Restablecer Contraseña

      p.mt-4
        a.text-blue-500.hover:text-blue-800(href='/login') Volver al Inicio de Sesión

// Script JavaScript para manejar el formulario y la comunicación con el backend
script.
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('resetPasswordForm');
    const emailInput = document.getElementById('email'); // Campo de email (puede estar deshabilitado)
    const newPasswordInput = document.getElementById('newPassword');
    const confirmPasswordInput = document.getElementById('confirmPassword');
    const submitBtn = document.getElementById('submitBtn');
    const messageArea = document.getElementById('message-area');
    const successMessage = document.getElementById('success-message');
    const successText = document.getElementById('success-text');
    const errorMessage = document.getElementById('error-message');
    const errorText = document.getElementById('error-text');

    // Obtener el token de la URL
    const urlParams = new URLSearchParams(window.location.search);
    const token = urlParams.get('token');

    // Si no hay token en la URL, mostrar un error y deshabilitar el formulario
    if (!token) {
      errorText.textContent = 'Token de restablecimiento no encontrado en la URL.';
      errorMessage.style.display = 'block';
      messageArea.style.display = 'block';
      form.style.display = 'none'; // Ocultar el formulario
      return; // Salir de la función
    }

    form.addEventListener('submit', async (e) => {
      e.preventDefault(); // Evitar el envío de formulario por defecto
      
      // Ocultar mensajes anteriores y deshabilitar botón
      messageArea.style.display = 'none';
      successMessage.style.display = 'none';
      errorMessage.style.display = 'none';
      submitBtn.disabled = true;
      submitBtn.textContent = 'Restableciendo...';

      const email = emailInput.value; // Puedes obtener el email si lo precargaste o dejarlo en blanco si no es clave
      const newPassword = newPasswordInput.value;
      const confirmPassword = confirmPasswordInput.value;

      // Validar que las contraseñas coincidan
      if (newPassword !== confirmPassword) {
        errorText.textContent = 'Las contraseñas no coinciden.';
        errorMessage.style.display = 'block';
        messageArea.style.display = 'block';
        submitBtn.disabled = false;
        submitBtn.textContent = 'Restablecer Contraseña';
        return;
      }
      // Validar longitud mínima de contraseña
      if (newPassword.length < 6) { // Coincide con minlength del modelo
        errorText.textContent = 'La nueva contraseña debe tener al menos 6 caracteres.';
        errorMessage.style.display = 'block';
        messageArea.style.display = 'block';
        submitBtn.disabled = false;
        submitBtn.textContent = 'Restablecer Contraseña';
        return;
      }

      try {
        // Enviar la solicitud PUT a la API de reset-password
        // El token va en la URL, los demás datos en el cuerpo
        const response = await fetch(`/api/auth/reset-password/${token}`, {
          method: 'PUT', // Utiliza PUT, como está definida la ruta
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ email, password: newPassword }), // Envía email (si lo usas) y la nueva contraseña
        });

        const data = await response.json();

        if (response.ok) {
          // Mostrar mensaje de éxito
          successText.textContent = data.message || 'Contraseña restablecida exitosamente.';
          successMessage.style.display = 'block';
          messageArea.style.display = 'block';
          // Redirigir al usuario a la página de inicio de sesión después del éxito
          setTimeout(() => {
            window.location.href = '/login';
          }, 3000); // Dar tiempo para leer el mensaje
        } else {
          // Mostrar mensaje de error
          errorText.textContent = data.message || 'Error al restablecer la contraseña.';
          errorMessage.style.display = 'block';
          messageArea.style.display = 'block';
        }
      } catch (error) {
        // Manejar errores de red o del servidor
        console.error('Error de red:', error);
        errorText.textContent = 'Error de conexión. Intenta de nuevo más tarde.';
        errorMessage.style.display = 'block';
        messageArea.style.display = 'block';
      } finally {
        // Habilitar el botón nuevamente
        submitBtn.disabled = false;
        submitBtn.textContent = 'Restablecer Contraseña';
      }
    });
  });
